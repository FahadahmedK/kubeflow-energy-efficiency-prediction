name: Eval model
inputs:
- {name: input_model, type: Model}
- {name: input_history, type: Artifact}
- {name: input_test_x, type: Dataset}
- {name: input_test_y, type: Artifact}
outputs:
- {name: MLPipeline_Metrics, type: Metrics}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location
      'tensorflow' 'pandas' 'appengine-python-standard' 'kfp==1.7.0' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet                 --no-warn-script-location 'tensorflow'
      'pandas' 'appengine-python-standard' 'kfp==1.7.0' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      from kfp.v2.dsl import *
      from typing import *

      def eval_model(
          input_model: Input[Model], input_history: Input[Artifact],
          input_test_x: Input[Dataset], input_test_y: Input[Artifact],
          MLPipeline_Metrics: Output[Metrics]
      ):
          import pandas as pd
          import tensorflow as tf
          import pickle

          model = tf.keras.models.load_model(input_model.path)
          norm_test_X = pd.read_csv(input_test_x.path)
          with open(input_test_y.path, "rb") as file:
              test_Y = pickle.load(file)

          loss, Y1_loss, Y2_loss, Y1_rmse, Y2_rmse = model.evaluate(x=norm_test_X, y=test_Y)
          print("Loss = {}, Y1_loss = {}, Y1_mse = {}, Y2_loss = {}, Y2_mse = {}".format(loss, Y1_loss, Y1_rmse, Y2_loss, Y2_rmse))

          MLPipeline_Metrics.log_metric("loss", loss)
          MLPipeline_Metrics.log_metric("Y1_loss", Y2_loss)
          MLPipeline_Metrics.log_metric("Y2_loss", Y2_loss)
          MLPipeline_Metrics.log_metric("Y1_rmse", Y2_loss)
          MLPipeline_Metrics.log_metric("Y2_rmse", Y2_loss)

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - eval_model
    - --input-model-output-path
    - {inputPath: input_model}
    - --input-history-output-path
    - {inputPath: input_history}
    - --input-test-x-output-path
    - {inputPath: input_test_x}
    - --input-test-y-output-path
    - {inputPath: input_test_y}
    - --MLPipeline-Metrics-output-path
    - {outputPath: MLPipeline_Metrics}
